(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const {print, log} = wlibc

log("WebContainer::Init")

__GLOBAL__.window = {}

const {TextEncoder, TextDecoder} = require('text-encoding-shim')
// const hexdump = require('hexdump-js')
const syscalls = require('./syscalls.js')
const Utf8ArrayToStr = require('./src/Utf8ArrayToStr')

const memory = new WebAssembly.Memory({initial: 10})
const buffer = new Uint8Array(memory.buffer)

const STACK_BEGIN = 100000

// The stack/heap seaparator exists here.
// The stack grows downwards to zero.
// The heap grows upward to te page break.
// buffer[1] = STACK_BEGIN

const PAGE_SIZE = 64 * 1024

// Allocate free space on the heap.
let malloc_offset = STACK_BEGIN + 1
function malloc(s) {
    const next = malloc_offset
    malloc_offset = malloc_offset + s
    return next
}

function nullTerminatedString(i) {
    const buffer = new Uint8Array(memory.buffer)
    let s = ""
    while(buffer[i] !== 0) {
        s += String.fromCharCode(buffer[i])
        i++
    }
    return s
}

const IOCTL = {
    TIOCGWINSZ: 0x5413
}

function ioctl_TIOCGWINSZ(structPtr) {
    // http://www.delorie.com/djgpp/doc/libc/libc_495.html
    const buffer = new Uint8Array(memory.buffer)
    const winsize = new Uint16Array(buffer.slice(structPtr, structPtr + 8).buffer)

    winsize[0] = 30 /* rows, in characters */
    winsize[1] = 60 /* columns, in characters */
    winsize[2] = 1000 /* horizontal size, pixels */
    winsize[3] = 1000 /* vertical size, pixels */

    return 0
}

function ioctl(fd, req, ...args) {
    switch(req) {
    case IOCTL.TIOCGWINSZ: {
        const [structPtr] = args
        ioctl_TIOCGWINSZ(structPtr)
    }; break
    default:
        return 0
    }
}

function brk(addrPtr) {
    // http://man7.org/linux/man-pages/man2/brk.2.html
    if (memory.buffer.byteLength < addrPtr) {
        const newPages = Math.ceil(addrPtr - memory.buffer.byteLength) / PAGE_SIZE
        dlog(`brk allocate ${newPages} new pages`)
        memory.grow(newPages)
    }
    return 0 // success
}

function clone(a, b) {
    // Just fail. This is hard.
    return -1
}

function rt_sigprocmask(how, set, oldset, sigsetsize) {
    // https://manpages.debian.org/testing/manpages-dev/rt_sigprocmask.2.en.html
    return 0 // LIES!
}

function writev(a, b, c) {
    const buffer = new Uint8Array(memory.buffer)
    const fd = a;
    const iovPtr = b;
    const iovCnt = c;
    const iovs = new Uint32Array(buffer.slice(iovPtr, iovPtr + 8 * iovCnt).buffer)
    let bytesWritten = 0
    for (let i = 0; i < iovCnt; i++) {
        const dataPtr = iovs[i*2+0]
        const byteCount = iovs[i*2+1]
        bytesWritten += byteCount
        const data = new Uint8Array(buffer.slice(dataPtr, dataPtr + byteCount).buffer)
        // print(s)
        wlibc.write(fd, data.buffer);
    }
    
    return bytesWritten
}

function openat(args) {
    const relfd = args[0] // "relative" fd to openat
    const filenamePtr = args[1]
    const filename = nullTerminatedString(filenamePtr)
    const flags = args[2]
    const mode = args[3]
    const fd = wlibc.open(filename)
    return fd
}

function read(args) {
    const buffer = new Uint8Array(memory.buffer)
    const [fd, ptr, count] = args
    const data = wlibc.read(fd, count)
    const bufa = new Uint8Array(data)
    
    for(let i=0; i < bufa.length; i++) {
        buffer[ptr + i] = bufa[i]
    }
    return bufa.length;
}

function write(args) {
    const buffer = new Uint8Array(memory.buffer)
    const [fd, strptr, len] = args
    return wlibc.write(fd, buffer.slice(strptr, strptr + len).buffer)
}

function close(args) {
    const [fd] = args
    return wlibc.close(fd)
}

const mmap_flags = {
    0: 'MAP_FILE',
    0x01: 'MAP_SHARED',
    0x02: 'MAP_PRIVATE',
    0x03: 'MAP_SHARED_VALIDATE',
    0x0f: 'MAP_TYPE',
    0x10: 'MAP_FIXED',
    0x20: 'MAP_ANON',
    0x4000: 'MAP_NORESERVE',
    0x0100: 'MAP_GROWSDOWN',
    0x0800: 'MAP_DENYWRITE',
    0x1000: 'MAP_EXECUTABLE',
    0x2000: 'MAP_LOCKED',
    0x8000: 'MAP_POPULATE',
    0x10000: 'MAP_NONBLOCK',
    0x20000: 'MAP_STACK',
    0x40000: 'MAP_HUGETLB',
    0x80000: 'MAP_SYNC',
    26: 'MAP_HUGE_SHIFT',
    0x3f: 'MAP_HUGE_MASK',
    [(16 << 26)]: 'MAP_HUGE_64KB',
    [(19 << 26)]: 'MAP_HUGE_512KB',
    [(20 << 26)]: 'MAP_HUGE_1MB',
    [(21 << 26)]: 'MAP_HUGE_2MB',
    [(23 << 26)]: 'MAP_HUGE_8MB',
    [(24 << 26)]: 'MAP_HUGE_16MB',
    [(28 << 26)]: 'MAP_HUGE_256MB',
    [(30 << 26)]: 'MAP_HUGE_1GB',
    [(31 << 26)]: 'MAP_HUGE_2GB',
    [(34 << 26)]: 'MAP_HUGE_16GB',  
}
const mmap_prop = {
    0: 'PROT_NONE',
    1: 'PROT_READ',
    2: 'PROT_WRITE',
    4: 'PROT_EXEC',
}
function mmap(ptr_addr, size_t_len, int_prot, int_flags, int_fd, off_t_offset) {
    dlog(`ptr_addr: ${ptr_addr}, size_t_len: ${size_t_len}, int_prot: ${int_prot}, int_flags:${int_flags}, int_fd: ${int_fd}, off_t_offset: ${off_t_offset}`)
    
    if (!int_prot) dlog(mmap_prop[0])
    for(i=0; i<3; i++) {
        if ((2**i & int_prot) && mmap_prop[2**i]) dlog(mmap_prop[2**i])
    }

    if (!int_flags) dlog(mmap_flags[0])
    for(i=0; i<29; i++) {
        if ((2**i & int_flags) && mmap_flags[2**i]) dlog(mmap_flags[2**i])
    }

    if (ptr_addr == 0 && int_fd == -1 && size_t_len < PAGE_SIZE) {
        const new_pages = Math.ceil(65536/PAGE_SIZE)
        dlog(`mmap allocate ${new_pages} new pages`)
        const old_size = memory.grow(new_pages)
        dlog(`old number of pages ${old_size}`)
        const new_start = old_size * PAGE_SIZE
        dlog(`new page start ${new_start}`)
        return new_start
    } else {
        throw new Error(`NOT YET IMPLEMENTED`)
    }
}

// Allow dynamic turning on/off a tracer function
var tracer = true
function dlog(...args) {
    if (tracer) {
        log(args.join(' '))
    }
}

const imports = {
    env: {
        memory,
        print: (arg) => {
            const buffer = new Uint8Array(memory.buffer)
            let s = ""
            let i = arg
            while(buffer[i]) {
                s += String.fromCharCode(buffer[i])
                i++
            }
            wlibc.print(s)
        },
        __syscall: (syscallno, argsPointer) => {
            const buffer = new Uint8Array(memory.buffer)
            // grab VAR_ARGS off the stack
            const args = new Int32Array(buffer.slice(argsPointer, argsPointer + 4 * 7).buffer)
            const {name} = syscalls[syscallno]
            dlog('__syscall', name)
            switch (name) {
            case 'openat': {
                return openat(args)
            }; break;
            case 'read': {
                return read(args)
            }; break;
            case 'close': {
                return close(args)
            }; break;
            case 'write': {
                return write(args)
            }; break
            default:
                log(`Unknown __syscall: ${name} args ${args}`)
                log(`${new Error().stack}`)
                return -1
            }
        },
        __syscall0: (syscallno) => {
            const {name} = syscalls[syscallno]
            dlog('__syscall0', name)
            switch(name) {
            case 'gettid': {
                return 1
            }; break
            default:
                log(`Unknown __syscall0 ${name}`)
                log(`${new Error().stack}`)
            }
        },
        __syscall1: (syscallno, a) => {
            const {name} = syscalls[syscallno]
            dlog('__syscall1', name)
            switch(name) {
            case 'brk': {
                return brk(a)
            }; break
            default:
                log(`Unknown __syscall1 ${name}, ${a}`)
                log(`${new Error().stack}`)
            }
        },
        __syscall2: (syscallno, a, b) => {
            const {name} = syscalls[syscallno]
            dlog('__syscall2', name)
            switch(name) {
            case 'clone': {
                return clone(a, b)
            }; break
            default:
                log(`Unknown __syscall2 ${name}, ${a} ${b}`)
                log(`${new Error().stack}`)
            }
        },
        __syscall7: (syscallno, ...args) => {
            const {name} = syscalls[syscallno]
            dlog('__syscall7', name)
            switch(name) {
            default:    
                log(`Unknown __syscall7 ${name}, ${args}`)
                log(`${new Error().stack}`)
            }
        },
        __syscall4: (syscallno, ...args) => {
            const {name} = syscalls[syscallno]
            dlog('__syscall4', name)
            switch(name) {
            case 'rt_sigprocmask': {
                return rt_sigprocmask(...args)
            }; break
            default:
                log(`Unknown __syscall4 ${name}, ${args}`)
                log(`${new Error().stack}`)
            }
        },
        __syscall5: (syscallno, ...args) => {
            const {name} = syscalls[syscallno]
            dlog('__syscall5', name)
            switch(name) {
            default:    
                log(`Unknown __syscall5 ${name}, ${args}`)
                log(`${new Error().stack}`)
            }
        },
        __syscall6: (syscallno, a, b, c, d, e, f) => {
            const {name} = syscalls[syscallno]
            dlog('__syscall6', name)
            switch(name) {
            case 'mmap': {
                return mmap(a, b, c, d, e, f)
            }; break
            default:
                log(`Unknown __syscall6 ${name}, ${a} ${b} ${c} ${d} ${e} ${f}`)
                log(`${new Error().stack}`)
            }
        },
        __syscall3: (syscallno, a, b, c) => {
            const {name} = syscalls[syscallno]
            dlog('__syscall3', name)
            switch (name) {
                case 'writev': {
                    return writev(a, b, c)
                }; break;
                case 'ioctl': {
                    return ioctl(a, b, c)
                }; break
                default: {
                    log(`Unknown __syscall3 ${name}, ${a} ${b} ${c}`)
                    log(`${new Error().stack}`)
                    return -1
                }
            }
        },
        __cxa_allocate_exception: (size) => {
            dlog(`__cxa_allocate_exception: ${size}`)
        },
        __cxa_throw: (exception, tinfo, dest) => {
            dlog(`__cxa_throw: ${exception}, ${tinfo}, ${dest}`)
        },

        _start() {},

        trace(onOff) {
            tracer = onOff
        },

        __cxa_allocate_exception() {
            return 0;
        },

        __cxa_throw() {
            throw new Error()
        }
    },
}

// Setup `main(int argc, char ** argv)`
// We have to write all the argv arguments to the head with our custom malloc.
// There is a lot of ArrayBuffer magic.
const argv = ["wasm", ...(__WASMARGS__.split(/\s+/))]
const argc = argv.length
const argvPointers = new Uint32Array(new ArrayBuffer(argv.length * 4))
var i = 0
for(const arg of argv) {
    const buffer = new Uint8Array(memory.buffer)
    const te = new TextEncoder()
    const be = te.encode(arg)
    const pt = malloc(be.byteLength + 1)
    
    // place each string on the heap
    buffer.set(be, pt)
    
    // record the pointer to another buffer
    // we will place this on the heap later
    argvPointers[i++] = pt
}
const st = malloc(argvPointers.byteLength)
// Need to recast our 32-bit pointer buffer to 8-bit typed array
// If we don't match the typed array sizes, weird stuff happens.
// If we cast them both to 32-bit arrays, the *st* pointer will be wrong.
new Uint8Array(memory.buffer).set(new Uint8Array(argvPointers.buffer), st)


// Run WASM bundle
const o = WebAssembly
.instantiate(__WASMBUNDLE__, imports)
.then(r => {
    log("WebContainer::Begin")
    const exit = r.instance.exports.main(argc, st)
    log("WebContainer::Exit Code(" + exit + ")")
    return exit
})
.catch(e => {
    log(e.message)
    wlibc.exit(1)
})
.then(code => wlibc.exit(code||0))

},{"./src/Utf8ArrayToStr":3,"./syscalls.js":4,"text-encoding-shim":2}],2:[function(require,module,exports){
(function (root, factory) {
    if (typeof define === "function" && define.amd) {
        define([], factory);
    } else if (typeof exports === "object") {
        module.exports = factory();
    } else {
		var textEncoding = factory();
        root.TextEncoder = textEncoding.TextEncoder;
		root.TextDecoder = textEncoding.TextDecoder;
    }
}(this, function () {
	"use strict";
	// return native implementation if available
	var g = typeof GLOBAL !== 'undefined' ? GLOBAL : window;
	if (typeof g.TextEncoder !== 'undefined' && typeof g.TextDecoder !== 'undefined') {
		return {'TextEncoder': g.TextEncoder, 'TextDecoder': g.TextDecoder};
	}

	// allowed encoding strings for utf-8
	var utf8Encodings = [
		'utf8',
		'utf-8',
		'unicode-1-1-utf-8'
	];

	var TextEncoder = function(encoding) {
		if (utf8Encodings.indexOf(encoding) < 0 && typeof encoding !== 'undefined' && encoding != null) {
			throw new RangeError('Invalid encoding type. Only utf-8 is supported');
		} else {
			this.encoding = 'utf-8';
			this.encode = function(str) {
				if (typeof str !== 'string') {
					throw new TypeError('passed argument must be of tye string');
				}
				var binstr = unescape(encodeURIComponent(str)),
					arr = new Uint8Array(binstr.length);
				binstr.split('').forEach(function(char, i) {
					arr[i] = char.charCodeAt(0);
				});
				return arr;
			};
		}
	}

	var TextDecoder = function(encoding, options) {
		if (utf8Encodings.indexOf(encoding) < 0 && typeof encoding !== 'undefined' && encoding != null) {
			throw new RangeError('Invalid encoding type. Only utf-8 is supported');
		}
		else {
			this.encoding = 'utf-8';
			this.ignoreBOM = false;
			this.fatal = (typeof options !== 'undefined' && fatal in options) ? options.fatal : false;
			if (typeof this.fatal !== 'boolean') {
				throw new TypeError('fatal flag must be boolean');
			}
			this.decode = function (view, options) {
				if (typeof view === 'undefined') {
					return '';
				}

				var stream = (typeof options !== 'undefined' && stream in options) ? options.stream : false;
				if (typeof stream !== 'boolean') {
					throw new TypeError('stream option must be boolean');
				}

				if (!ArrayBuffer.isView(view)) {
					throw new TypeError('passed argument must be an array buffer view');
				} else {
					var arr = new Uint8Array(view.buffer),
						charArr = new Array(arr.length);
					arr.forEach(function(charcode, i) {
						charArr[i] = String.fromCharCode(charcode);
					});
					return decodeURIComponent(escape(charArr.join('')));
				}
			}
		}
	}
	return {'TextEncoder': TextEncoder, 'TextDecoder': TextDecoder};
}));
},{}],3:[function(require,module,exports){
module.exports = function Utf8ArrayToStr(array) {
    var out, i, len, c;
    var char2, char3;

    out = "";
    len = array.length;
    i = 0;
    while (i < len) {
        c = array[i++];
        switch (c >> 4) {
            case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
                // 0xxxxxxx
                out += String.fromCharCode(c);
                break;
            case 12: case 13:
                // 110x xxxx   10xx xxxx
                char2 = array[i++];
                out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
                break;
            case 14:
                // 1110 xxxx  10xx xxxx  10xx xxxx
                char2 = array[i++];
                char3 = array[i++];
                out += String.fromCharCode(((c & 0x0F) << 12) |
                    ((char2 & 0x3F) << 6) |
                    ((char3 & 0x3F) << 0));
                break;
        }
    }
    return out;
}
},{}],4:[function(require,module,exports){
module.exports = {
    0: {name: "io_setup", numargs: 1},
    1: {name: "io_destroy", numargs: 1},
    2: {name: "io_submit", numargs: 1},
    3: {name: "io_cancel", numargs: 1},
    4: {name: "io_getevents", numargs: 1},
    5: {name: "setxattr", numargs: 1},
    6: {name: "lsetxattr", numargs: 1},
    7: {name: "fsetxattr", numargs: 1},
    8: {name: "getxattr", numargs: 1},
    9: {name: "lgetxattr", numargs: 1},
    10: {name: "fgetxattr", numargs: 1},
    11: {name: "listxattr", numargs: 1},
    12: {name: "llistxattr", numargs: 1},
    13: {name: "flistxattr", numargs: 1},
    14: {name: "removexattr", numargs: 1},
    15: {name: "lremovexattr", numargs: 1},
    16: {name: "fremovexattr", numargs: 1},
    17: {name: "getcwd", numargs: 1},
    18: {name: "lookup_dcookie", numargs: 1},
    19: {name: "eventfd2", numargs: 1},
    20: {name: "epoll_create1", numargs: 1},
    21: {name: "epoll_ctl", numargs: 1},
    22: {name: "epoll_pwait", numargs: 1},
    23: {name: "dup", numargs: 1},
    24: {name: "dup3", numargs: 1},
    25: {name: "fcntl", numargs: 1},
    26: {name: "inotify_init1", numargs: 1},
    27: {name: "inotify_add_watch", numargs: 1},
    28: {name: "inotify_rm_watch", numargs: 1},
    29: {name: "ioctl", numargs: 1},
    30: {name: "ioprio_set", numargs: 1},
    31: {name: "ioprio_get", numargs: 1},
    32: {name: "flock", numargs: 1},
    33: {name: "mknodat", numargs: 1},
    34: {name: "mkdirat", numargs: 1},
    35: {name: "unlinkat", numargs: 1},
    36: {name: "symlinkat", numargs: 1},
    37: {name: "linkat", numargs: 1},
    38: {name: "renameat", numargs: 1},
    39: {name: "umount2", numargs: 1},
    40: {name: "mount", numargs: 1},
    41: {name: "pivot_root", numargs: 1},
    42: {name: "nfsservctl", numargs: 1},
    43: {name: "statfs", numargs: 1},
    44: {name: "fstatfs", numargs: 1},
    45: {name: "truncate", numargs: 1},
    46: {name: "ftruncate", numargs: 1},
    47: {name: "fallocate", numargs: 1},
    48: {name: "faccessat", numargs: 1},
    49: {name: "chdir", numargs: 1},
    50: {name: "fchdir", numargs: 1},
    51: {name: "chroot", numargs: 1},
    52: {name: "fchmod", numargs: 1},
    53: {name: "fchmodat", numargs: 1},
    54: {name: "fchownat", numargs: 1},
    55: {name: "fchown", numargs: 1},
    56: {name: "openat", numargs: 1},
    57: {name: "close", numargs: 1},
    58: {name: "vhangup", numargs: 1},
    59: {name: "pipe2", numargs: 1},
    60: {name: "quotactl", numargs: 1},
    61: {name: "getdents64", numargs: 1},
    62: {name: "lseek", numargs: 1},
    63: {name: "read", numargs: 1},
    64: {name: "write", numargs: 1},
    65: {name: "readv", numargs: 1},
    66: {name: "writev", numargs: 1},
    67: {name: "pread64", numargs: 1},
    68: {name: "pwrite64", numargs: 1},
    69: {name: "preadv", numargs: 1},
    70: {name: "pwritev", numargs: 1},
    71: {name: "sendfile", numargs: 1},
    72: {name: "pselect6", numargs: 1},
    73: {name: "ppoll", numargs: 1},
    74: {name: "signalfd4", numargs: 1},
    75: {name: "vmsplice", numargs: 1},
    76: {name: "splice", numargs: 1},
    77: {name: "tee", numargs: 1},
    78: {name: "readlinkat", numargs: 1},
    79: {name: "newfstatat", numargs: 1},
    80: {name: "fstat", numargs: 1},
    81: {name: "sync", numargs: 1},
    82: {name: "fsync", numargs: 1},
    83: {name: "fdatasync", numargs: 1},
    84: {name: "sync_file_range", numargs: 1},
    85: {name: "timerfd_create", numargs: 1},
    86: {name: "timerfd_settime", numargs: 1},
    87: {name: "timerfd_gettime", numargs: 1},
    88: {name: "utimensat", numargs: 1},
    89: {name: "acct", numargs: 1},
    90: {name: "capget", numargs: 1},
    91: {name: "capset", numargs: 1},
    92: {name: "personality", numargs: 1},
    93: {name: "exit", numargs: 1},
    94: {name: "exit_group", numargs: 1},
    95: {name: "waitid", numargs: 1},
    96: {name: "set_tid_address", numargs: 1},
    97: {name: "unshare", numargs: 1},
    98: {name: "futex", numargs: 1},
    99: {name: "set_robust_list", numargs: 1},
    100: {name: "get_robust_list", numargs: 1},
    101: {name: "nanosleep", numargs: 1},
    102: {name: "getitimer", numargs: 1},
    103: {name: "setitimer", numargs: 1},
    104: {name: "kexec_load", numargs: 1},
    105: {name: "init_module", numargs: 1},
    106: {name: "delete_module", numargs: 1},
    107: {name: "timer_create", numargs: 1},
    108: {name: "timer_gettime", numargs: 1},
    109: {name: "timer_getoverrun", numargs: 1},
    110: {name: "timer_settime", numargs: 1},
    111: {name: "timer_delete", numargs: 1},
    112: {name: "clock_settime", numargs: 1},
    113: {name: "clock_gettime", numargs: 1},
    114: {name: "clock_getres", numargs: 1},
    115: {name: "clock_nanosleep", numargs: 1},
    116: {name: "syslog", numargs: 1},
    117: {name: "ptrace", numargs: 1},
    118: {name: "sched_setparam", numargs: 1},
    119: {name: "sched_setscheduler", numargs: 1},
    120: {name: "sched_getscheduler", numargs: 1},
    121: {name: "sched_getparam", numargs: 1},
    122: {name: "sched_setaffinity", numargs: 1},
    123: {name: "sched_getaffinity", numargs: 1},
    124: {name: "sched_yield", numargs: 1},
    125: {name: "sched_get_priority_max", numargs: 1},
    126: {name: "sched_get_priority_min", numargs: 1},
    127: {name: "sched_rr_get_interval", numargs: 1},
    128: {name: "restart_syscall", numargs: 1},
    129: {name: "kill", numargs: 1},
    130: {name: "tkill", numargs: 1},
    131: {name: "tgkill", numargs: 1},
    132: {name: "sigaltstack", numargs: 1},
    133: {name: "rt_sigsuspend", numargs: 1},
    134: {name: "rt_sigaction", numargs: 1},
    135: {name: "rt_sigprocmask", numargs: 1},
    136: {name: "rt_sigpending", numargs: 1},
    137: {name: "rt_sigtimedwait", numargs: 1},
    138: {name: "rt_sigqueueinfo", numargs: 1},
    139: {name: "rt_sigreturn", numargs: 1},
    140: {name: "setpriority", numargs: 1},
    141: {name: "getpriority", numargs: 1},
    142: {name: "reboot", numargs: 1},
    143: {name: "setregid", numargs: 1},
    144: {name: "setgid", numargs: 1},
    145: {name: "setreuid", numargs: 1},
    146: {name: "setuid", numargs: 1},
    147: {name: "setresuid", numargs: 1},
    148: {name: "getresuid", numargs: 1},
    149: {name: "setresgid", numargs: 1},
    150: {name: "getresgid", numargs: 1},
    151: {name: "setfsuid", numargs: 1},
    152: {name: "setfsgid", numargs: 1},
    153: {name: "times", numargs: 1},
    154: {name: "setpgid", numargs: 1},
    155: {name: "getpgid", numargs: 1},
    156: {name: "getsid", numargs: 1},
    157: {name: "setsid", numargs: 1},
    158: {name: "getgroups", numargs: 1},
    159: {name: "setgroups", numargs: 1},
    160: {name: "uname", numargs: 1},
    161: {name: "sethostname", numargs: 1},
    162: {name: "setdomainname", numargs: 1},
    163: {name: "getrlimit", numargs: 1},
    164: {name: "setrlimit", numargs: 1},
    165: {name: "getrusage", numargs: 1},
    166: {name: "umask", numargs: 1},
    167: {name: "prctl", numargs: 1},
    168: {name: "getcpu", numargs: 1},
    169: {name: "gettimeofday", numargs: 1},
    170: {name: "settimeofday", numargs: 1},
    171: {name: "adjtimex", numargs: 1},
    172: {name: "getpid", numargs: 1},
    173: {name: "getppid", numargs: 1},
    174: {name: "getuid", numargs: 1},
    175: {name: "geteuid", numargs: 1},
    176: {name: "getgid", numargs: 1},
    177: {name: "getegid", numargs: 1},
    178: {name: "gettid", numargs: 1},
    179: {name: "sysinfo", numargs: 1},
    180: {name: "mq_open", numargs: 1},
    181: {name: "mq_unlink", numargs: 1},
    182: {name: "mq_timedsend", numargs: 1},
    183: {name: "mq_timedreceive", numargs: 1},
    184: {name: "mq_notify", numargs: 1},
    185: {name: "mq_getsetattr", numargs: 1},
    186: {name: "msgget", numargs: 1},
    187: {name: "msgctl", numargs: 1},
    188: {name: "msgrcv", numargs: 1},
    189: {name: "msgsnd", numargs: 1},
    190: {name: "semget", numargs: 1},
    191: {name: "semctl", numargs: 1},
    192: {name: "semtimedop", numargs: 1},
    193: {name: "semop", numargs: 1},
    194: {name: "shmget", numargs: 1},
    195: {name: "shmctl", numargs: 1},
    196: {name: "shmat", numargs: 1},
    197: {name: "shmdt", numargs: 1},
    198: {name: "socket", numargs: 1},
    199: {name: "socketpair", numargs: 1},
    200: {name: "bind", numargs: 1},
    201: {name: "listen", numargs: 1},
    202: {name: "accept", numargs: 1},
    203: {name: "connect", numargs: 1},
    204: {name: "getsockname", numargs: 1},
    205: {name: "getpeername", numargs: 1},
    206: {name: "sendto", numargs: 1},
    207: {name: "recvfrom", numargs: 1},
    208: {name: "setsockopt", numargs: 1},
    209: {name: "getsockopt", numargs: 1},
    210: {name: "shutdown", numargs: 1},
    211: {name: "sendmsg", numargs: 1},
    212: {name: "recvmsg", numargs: 1},
    213: {name: "readahead", numargs: 1},
    214: {name: "brk", numargs: 1},
    215: {name: "munmap", numargs: 1},
    216: {name: "mremap", numargs: 1},
    217: {name: "add_key", numargs: 1},
    218: {name: "request_key", numargs: 1},
    219: {name: "keyctl", numargs: 1},
    220: {name: "clone", numargs: 1},
    221: {name: "execve", numargs: 1},
    222: {name: "mmap", numargs: 1},
    223: {name: "fadvise64", numargs: 1},
    224: {name: "swapon", numargs: 1},
    225: {name: "swapoff", numargs: 1},
    226: {name: "mprotect", numargs: 1},
    227: {name: "msync", numargs: 1},
    228: {name: "mlock", numargs: 1},
    229: {name: "munlock", numargs: 1},
    230: {name: "mlockall", numargs: 1},
    231: {name: "munlockall", numargs: 1},
    232: {name: "mincore", numargs: 1},
    233: {name: "madvise", numargs: 1},
    234: {name: "remap_file_pages", numargs: 1},
    235: {name: "mbind", numargs: 1},
    236: {name: "get_mempolicy", numargs: 1},
    237: {name: "set_mempolicy", numargs: 1},
    238: {name: "migrate_pages", numargs: 1},
    239: {name: "move_pages", numargs: 1},
    240: {name: "rt_tgsigqueueinfo", numargs: 1},
    241: {name: "perf_event_open", numargs: 1},
    242: {name: "accept4", numargs: 1},
    243: {name: "recvmmsg", numargs: 1},
    260: {name: "wait4", numargs: 1},
    261: {name: "prlimit64", numargs: 1},
    262: {name: "fanotify_init", numargs: 1},
    263: {name: "fanotify_mark", numargs: 1},
    264: {name: "name_to_handle_at", numargs: 1},
    265: {name: "open_by_handle_at", numargs: 1},
    266: {name: "clock_adjtime", numargs: 1},
    267: {name: "syncfs", numargs: 1},
    268: {name: "setns", numargs: 1},
    269: {name: "sendmmsg", numargs: 1},
    270: {name: "process_vm_readv", numargs: 1},
    271: {name: "process_vm_writev", numargs: 1},
    272: {name: "kcmp", numargs: 1},
    273: {name: "finit_module", numargs: 1},
    274: {name: "sched_setattr", numargs: 1},
    275: {name: "sched_getattr", numargs: 1},
    276: {name: "renameat2", numargs: 1},
    277: {name: "seccomp", numargs: 1},
    278: {name: "getrandom", numargs: 1},
    279: {name: "memfd_create", numargs: 1},
    280: {name: "bpf", numargs: 1},
    281: {name: "execveat", numargs: 1},
    282: {name: "userfaultfd", numargs: 1},
    283: {name: "membarrier", numargs: 1},
    284: {name: "mlock2", numargs: 1},
    285: {name: "copy_file_range", numargs: 1},
    286: {name: "preadv2", numargs: 1},
    287: {name: "pwritev2", numargs: 1},
    288: {name: "pkey_mprotect", numargs: 1},
    289: {name: "pkey_alloc", numargs: 1},
    290: {name: "pkey_free", numargs: 1},
    291: {name: "statx", numargs: 1},
}
},{}]},{},[1]);
